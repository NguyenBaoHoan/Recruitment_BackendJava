import axios from 'axios';

/**
 * Axios instance
 * - withCredentials: true ‚Üí T·ª± ƒë·ªông g·ª≠i cookies (refresh_token)
 * - Kh√¥ng c·∫ßn Authorization header v√¨ s·∫Ω ƒë∆∞·ª£c th√™m ƒë·ªông
 */
const apiClient = axios.create({
  baseURL: 'http://localhost:8080/api/v1',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, // ‚ö†Ô∏è Quan tr·ªçng: Cho ph√©p g·ª≠i/nh·∫≠n cookies
});

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u access token (trong memory, kh√¥ng ph·∫£i localStorage)
let accessToken = null;

/**
 * Set access token v√†o memory
 */
export const setAccessToken = (token) => {
  accessToken = token;
};

/**
 * Get access token t·ª´ memory
 */
export const getAccessToken = () => {
  return accessToken;
};

/**
 * Clear access token
 */
export const clearAccessToken = () => {
  accessToken = null;
};

/**
 * Request Interceptor
 * T·ª± ƒë·ªông th√™m access token v√†o header
 */
apiClient.interceptors.request.use(
  (config) => {
    // N·∫øu c√≥ access token, th√™m v√†o Authorization header
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }
    
    console.log('üöÄ Request:', config.method.toUpperCase(), config.url);
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

/**
 * Response Interceptor
 * X·ª≠ l√Ω auto refresh token khi 401
 */
let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  
  failedQueue = [];
};

apiClient.interceptors.response.use(
  (response) => {
    console.log('‚úÖ Response:', response.status, response.config.url);
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu 401 v√† ch∆∞a retry
    if (error.response?.status === 401 && !originalRequest._retry) {
      // N·∫øu ƒëang refresh, ƒë·ª£i
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        })
          .then(token => {
            originalRequest.headers.Authorization = `Bearer ${token}`;
            return apiClient(originalRequest);
          })
          .catch(err => {
            return Promise.reject(err);
          });
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // G·ªçi refresh token API (refresh_token t·ª± ƒë·ªông g·ª≠i qua cookie)
        // S·ª≠ d·ª•ng axios tr·ª±c ti·∫øp ƒë·ªÉ tr√°nh circular interceptor call
        const response = await axios.get('http://localhost:8080/api/v1/auth/refresh', {
          withCredentials: true,
          timeout: 10000
        });

        const newAccessToken = response.data.access_token;
        
        // L∆∞u access token m·ªõi
        setAccessToken(newAccessToken);
        
        // X·ª≠ l√Ω c√°c request ƒëang ch·ªù
        processQueue(null, newAccessToken);
        
        // Retry original request v·ªõi token m·ªõi
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return apiClient(originalRequest);
        
      } catch (refreshError) {
        processQueue(refreshError, null);
        clearAccessToken();
        
        // Redirect v·ªÅ login
        window.location.href = '/login';
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    console.error('‚ùå Response Error:', error);
    const errorMessage = error.response?.data?.message || error.message || 'Something went wrong';
    return Promise.reject(new Error(errorMessage));
  }
);

export { apiClient };